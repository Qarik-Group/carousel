// Code generated by "enumer -type=Action -json -transform=CamelCase"; DO NOT EDIT.

//
package state

import (
	"encoding/json"
	"fmt"
)

const _ActionName = "NoneNoOverwriteBoshDeployRegenerateCleanUpMarkTransitionalUnMarkTransitional"

var _ActionIndex = [...]uint8{0, 4, 15, 25, 35, 42, 58, 76}

func (i Action) String() string {
	if i < 0 || i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

var _ActionValues = []Action{0, 1, 2, 3, 4, 5, 6}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:4]:   0,
	_ActionName[4:15]:  1,
	_ActionName[15:25]: 2,
	_ActionName[25:35]: 3,
	_ActionName[35:42]: 4,
	_ActionName[42:58]: 5,
	_ActionName[58:76]: 6,
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Action
func (i Action) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Action
func (i *Action) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Action should be a string, got %s", data)
	}

	var err error
	*i, err = ActionString(s)
	return err
}
