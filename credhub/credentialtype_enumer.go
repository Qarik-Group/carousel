// Code generated by "enumer -type=CredentialType -json -transform=snake"; DO NOT EDIT.

//
package credhub

import (
	"encoding/json"
	"fmt"
)

const _CredentialTypeName = "certificatesshrsapassworduservaluejson"

var _CredentialTypeIndex = [...]uint8{0, 11, 14, 17, 25, 29, 34, 38}

func (i CredentialType) String() string {
	if i < 0 || i >= CredentialType(len(_CredentialTypeIndex)-1) {
		return fmt.Sprintf("CredentialType(%d)", i)
	}
	return _CredentialTypeName[_CredentialTypeIndex[i]:_CredentialTypeIndex[i+1]]
}

var _CredentialTypeValues = []CredentialType{0, 1, 2, 3, 4, 5, 6}

var _CredentialTypeNameToValueMap = map[string]CredentialType{
	_CredentialTypeName[0:11]:  0,
	_CredentialTypeName[11:14]: 1,
	_CredentialTypeName[14:17]: 2,
	_CredentialTypeName[17:25]: 3,
	_CredentialTypeName[25:29]: 4,
	_CredentialTypeName[29:34]: 5,
	_CredentialTypeName[34:38]: 6,
}

// CredentialTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CredentialTypeString(s string) (CredentialType, error) {
	if val, ok := _CredentialTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CredentialType values", s)
}

// CredentialTypeValues returns all values of the enum
func CredentialTypeValues() []CredentialType {
	return _CredentialTypeValues
}

// IsACredentialType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CredentialType) IsACredentialType() bool {
	for _, v := range _CredentialTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CredentialType
func (i CredentialType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CredentialType
func (i *CredentialType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CredentialType should be a string, got %s", data)
	}

	var err error
	*i, err = CredentialTypeString(s)
	return err
}
